Спрощена модель автомобіля для тривимірної ігри в умовах обмежених ресурсів.

Зміст
Введення
Розділ 1. Аналіз предметної області та постанова задачі.
    1.1 Моделювання фізики у вимогливих до ресурсів системах.
Розділ 2. Огляд засобів розробки.
    2.1 Рендеринг в реальному часі.
        2.1.1 DirectX.
        2.1.2 OpenGL.
    2.2 Сучасні веб-технології, графіка в браузері.
        2.2.1 JavaScript
        2.2.2 HTML 5 Canvas API.
        2.2.3 WebGL (OpenGL ES 2.0).
        2.2.4 Three.js.
    2.3 Огляз засобів розробки тривимірних моделей.
    2.4 Формати даних для зберігання тривимірних моделей.
Розділ 3. Опис програмної реалізації.
    3.1 Розробка спрощеної математичної моделі автівки.
        3.1.1 Двигун.
        3.1.2 Трансмісія.
        3.1.3 Колеса.
        3.1.4 Кермування.
        3.1.5 Підвіска.
        3.1.6 Інерція/занесення всієї автівки.
    3.2 Розробка ігрового інтерфесу.
        3.2.1 Розташування моделі та камери.
        3.2.2 Зв’язок між розташуванням камери та показниками моделі.
            3.2.2.1 Швидкість.
            3.2.2.2 Поворот керма та швидкість.
    3.3 Управління.
Розділ 4. Охорона праці.
    4.1 Правові основи охорони праці
        4.1.1 Державне управління охороною праці та нормативно-правові акти з охорони праці
    4.2 Класифікація причин і методи аналізу виробничого травматизму та профзахворювань
        4.2.1 Основні причини виробничого травматизму і профзахворюваннь та заходи щодо їхнього попередження
    4.3 Основи фізіології, гігієни праці та виробничої санітарії
        4.3.1 Виробниче освітлення
    4.4 Основи техніки безпеки на виробництві
        4.4.1 Безпека умов праці при використанні персональних комп’ютерів
    4.5 Основи пожежної безпеки
        4.5.1 Пожежна безпека на виробництві
Література.
Додатки.

Введення
З кожним роком у вз’яpку з росповсюдженням і зростанням пропускної здатності всесвітньої мережі Інтернет, збільшенням потужності сучасних комп’ютерів та появною інноваційних веб-технологій, притаманних раніше лише застосункам, встановленим в ос, зростає актуальність перенесення типових десктопних програм до вебу.
Медіапреєри, графічні редактори, текстові редактори, інтерфейси СУБД, словники, геоінформаційні системи і багато інших категорій прикладного програмного забеспечення станом на 2014 рік вдало освоїлися у вигляді веб-застосунків.
Окремо стоять ігри, як один з найвимогливіших до оточення видів ПЗ, ця категорія не поспішає долучитися до сучасної моди.
Привабливість веба як платформи для ігор полягає в першу чергу у відсутності необхідності встановлювати застосунок на комп’ютер, переймаючись безпекою системи; натомість веб-застосунок можна зберегти, використуючи HTML 5 Cache Manifest.
До того ж, зважаючи на вплив соціальних сервісів в сучасному суспільстві, веб-ігри отримують перевагу через простоту інтеграції з ними.
За аналітікою Gartner на базі Android, iOS, WindowsPhone чи BlackBerry у 2013 було продано близько мільярда смартфонів та близько 200 000 планшетів.
Веб-застосунки мають доступ до всієї різноманітності цих мобільних платформ апріорі, бо все, що вони потребують це доступ до Інтернету та сучасний браузер.
До недоліків веб-застосунків відносяться повільність та обмеженість JavaScript, як основного язика для розробки чи віртуальної машини (якщо язик розробки транслюється в JavaScript).
Деякі нововведення та технології в сучасних браузерах покращують ситуацію з повільністю (HTML 5 Workers, оптимізації у рушію V8), але, нажаль, не драматично.
Ціль моєї дипломної роботи довести придатність веба як достатньо продуктивної платформи для розробки ігор, продемонструвати архітектуру та оптимізації фізичної моделі для гри в умовах обмежени ресурсів, а також навести приклади використання сучасних технологій та бібліотек для браузерних графічних застосунків.
Використуючи технології HTML 5 Canvas API, WebGL та розробивши оптимізовану для умов обмежених вичислювальних можливостей фізичну модель цілком можливо досягти задовільної продуктивності веб-застосунку - гри.
Я аналізував досвід західних компаній та ентузіастів з використання вельми молодої технології WebGL, вивчав документи про розробку ігрової фізики автомобіля, опубліковані компанією Dolphinity (гра Racer (2000)), а також відомий у вузьких колах туторіал "Car Physics for Games" за авторством анонімного юзера з нікнеймом Marco Monster.
Актуальність моєї теми буде тільки зростати з часом, бо потужність комп’ютериів і швидкиість мережі з часом лише зростатимуть, технологія WebGL здобуватиме все більше прихильників та розроників, будуть з’являтися нові бібліотеки та технології у галузі веб-ігор, а самі веб-ігри ставатимуть все популярнішими.
В першому розділі детальний опис задачі, в другому розділі огляд сучасних технологій, які використуються в розробці ігр, в третьому розділі деталі моєї реалізації гри, а також опис моєї спрощеної фізичної моделі автівки.

Розділ 1. Аналіз предметної області та постанова задачі.
Гоночні симулятори це різновид відеоігор, де гравець управляє автомобілем. Ви можете розважатися рулюючи швидкою та потужною машиною, взрізаючись або просто створюючи у грі сценарії, на котрі не зважилися би в реальному житті.
Відомі приклади таких симуляторів це: Need For Speed з аркадною фізикою, Gran Turismo з фізикою більш наближеною до дійсності.
У відкритому доступі є лише один безкоштовний для не-комерціного використання проект рівня попередніх прикладів: це гра Racer (2000), фізика якої розроблена за ретельно дослідженими технічними документами досліджень показників реальних автівок задля максимально реалістиного відчуття.
Для мого симулятора авто також потрібен ігровий рушій. Він повинен мати достатньо (як для гри) реалістичну фізику автівки.
Фізика може бути аркадною або якнайбільш наближеною до дійсності. У будь якому разі мінімально необхідні якості моделі це:
- прискорення
- гальмування
- кермування
- рухлива підвіска
- занесення
Вже з цим мінімально необхідним набором властивостей моделі ми отримуємо можливість візуально реалістично моделювати рух авто.
До всього того також потрібна візуалізація. Для веб-застосунку безальтернативним варіантом є WebGL, низькорівнева бібліотека для беспосереднього використання потужностей відеокарти для рендерінгу тривимірної графіки у браузері.
Отже, задача: розробити гру - гоночний симулятор на JavaScript, яка буде виконуватися у браузері та використовувати рушій зі спрощеною фізичною моделлю, здатною справно працювати у реальному часі в умовах обмежених ресурсів веб-застосунку.

1.1 Моделювання фізики у вимогливих до ресурсів системах.
Головна архітектурна задача при створенні фізичної моделі, яка буде працювати у реальному часі, це з’ясувати, які фізичні процеси необхідні, а якими можна знехтувати. Наприклад проектуючи модель падіння каміння з висоти 1 метр не можна нехтувати прискоренням вільного падіння, але можна знехтувати впливом гравітації Луни.
Головна ідея: не треба створювати дійсність, треба створити щось накшталт.
В випадку авто можна знехтувати температурою двигуна, спростити розрахунки опору, об’єднавши опір двигуна та трансмісії й тому подібне.
Не можна забувати, що треба прораховувати фізику у реальному часі, тобто синхронно з рендерінгом, для кожного кадра. Це обмежує систему, але для однієї автівки буде достатньо, якщо симуляція працює в сучасному браузері на комп’ютері чи смартфоні з відеочіпом.

Розділ 2. Огляд засобів розробки.
2.1 Рендеринг в реальному часі.
2.1.1 DirectX.
DirectX — це набір API функцій, розроблених для простого і ефективного вирішення завдань, пов'язаних з ігровим і відеопрограмуванням під Microsoft Windows. Найширше використовується при написанні комп'ютерних ігор.
Практично всі частини DirectX API є набори COM-сумісних об'єктів.
Багато сучасних пристроїв мають тільки DirectX-сумісні драйвера, іншими словами, користувач повинен встановити DirectX для використання всіх можливостей пристрою. У цей час система оновлення драйверів Windows Update дозволяє завантажувати тільки необхідні бібліотеки, а не весь драйвер цілком.
Через те, що DirectX працює тільки на платформі Windows, а також не підтримується натівно в сучасних браузерах станом на 2014 рік для моєї задачі ця технологія не підходить.

2.1.2 OpenGL.
OpenGL — (англ. Open Graphics Library — відкрита графічна бібліотека) — специфікація, що визначає незалежний від мови програмування крос-платформовий програмний інтерфейс (API) для написання застосунків, що використовують 2D та 3D комп'ютерну графіку. Цей інтерфейс містить понад 250 функцій, які можуть використовуватися для малювання складних тривимірних сцен з простих примітивів. Широко застосовується індустрією комп'ютерних ігор і віртуальної реальності, у графічних інтерфейсах (Compiz, Clutter), при візуалізації наукових даних, в системах автоматизованого проектування тощо.
На базовому рівні, OpenGL — це всього лише специфікація, себто, це — просто документ, який описує набір функцій і їх точну поведінку. На основі цих специфікацій виробники апаратного забезпечення створюють реалізації — бібліотеки функцій, які відповідають заявленій в OpenGL специфікації. Ці реалізації проектуються для того, щоб при можливості використовувати можливості апаратного забезпечення. Коли апаратне прискорення не допускається, виконання функцій здійснюється за допомогою програмного забезпечення. Виробники повинні пройти спеціальні тести на відповідність, перш, ніж їхню реалізацію класифікуватимуть, як реалізацію OpenGL. Таким чином, розробникам програмного забезпечення необхідно всього лиш навчитися використовувати описані у специфікації функції, і лишити їхню реалізацію за розробниками апаратного забезпечення.
Ефективні реалізації OpenGL існують для операційних систем Linux, MacOS X, Microsoft Windows та багатьох UNIX-подібних ОС, а також для таких ігрових боксів, як Sony PlayStation 3. Різні програмні реалізації OpenGL існують для платформ, виробники яких не підтримують дану специфікацію.
OpenGL орієнтується на такі два завдання: Сховати складності адаптації різних 3D-прискорювачів, надаючи розробнику єдиний API. Приховати відмінності в можливостях апаратних платформ, вимагаючи реалізації відсутньої функціональності за допомогою програмної емуляції. Основним принципом роботи OpenGL є отримання наборів векторних графічних примітивів у вигляді точок, ліній та багатокутників з наступною математичною обробкою отриманих даних та побудовою растрової картинки на екрані і/або в пам'яті. Векторні трансформації та растеризация виконуються графічним конвеєром (graphics pipeline), який власне являє собою дискретний автомат.
Абсолютна більшість команд OpenGL потрапляють в одну з двох груп: або вони додають графічні примітиви на вхід в конвеєр, або конфігурують конвеєр на різне виконання трансформацій.
OpenGL є низькорівневим процедурним API, що змушує програміста диктувати точну послідовність кроків, щоб побудувати результуючу растрову графіку (імперативний підхід). Це є основною відмінністю від дескрипторних підходів, коли вся сцена передається у вигляді структури даних (найчастіше дерева), яке обробляється і будується на екрані. З одного боку, імперативний підхід вимагає від програміста глибокого знання законів тривимірної графіки та математичних моделей, з іншого боку — дає свободу впровадження різних інновацій.

2.2 Сучасні веб-технології, графіка в браузері.
2.2.1 JavaScript
JavaScript — назва реалізації стандарту мови програмування ECMAScript компанії Netscape, базується на принципах прототипного програмування. Найпоширеніше і найвідоміше застосування мови — написання сценаріїв для веб-сторінок, але, також, використовується для впровадження сценаріїв керування об’єктами вбудованими в інші програми.
JavaScript має низку властивостей об’єктно-орієнтованої мови, але завдяки концепції прототипів підтримка об’єктів в ній відрізняється від традиційних мов ООП. Крім того, JavaScript має ряд властивостей, притаманних функціональним мовам, — функції як об’єкти першого рівня, об’єкти як списки, каррінг (currying), анонімні функції, замикання (closures) — що додає мові додаткову гнучкість.

2.2.2 HTML 5 Canvas API.
Canvas (англ. canvas — «полотно») — елемент HTML5, який можна застосовувати для малювання графіки використовуючи скрипти (переважно JavaScript). Наприклад його можна застосувати для малювання графів, створення фотокомпозицій а також анімації.
Елемент <canvas> є частиною специфікації WhatWG Web applications 1.0, що відома як HTML 5.
<canvas> вперше було втілено Apple в Mac OS X Dashboard Safari. У Gecko підтримка canvas з'явилася в версії 1.5, у Presto з версії 9.0 веб-браузера Opera. Internet Explorer підтримує canvas починаючи з 9-ї версії.
<canvas> створює поверхню для малювання, яка надає один або більше контекстів для відтворення, який використовується
для створення відображуваного контенту і маніпуляцій з ним.

2.2.3 WebGL (OpenGL ES 2.0).
WebGL — це стандарт на базі OpenGL ES 2.0, що дозволяє розробникам веб-контенту вбудовувати в веб-оглядачі, які підтримують HTML5, повноцінну 3D-графіку, не вдаючись до посередництва плагінів.
В намірах розробників поширити стандарт WebGL не тільки в браузерах персональних комп'ютерів, а й у мобільних інтернет-пристроях.
До робочої групи WebGL входять Khronos Group, представники провідних розробників інтернет-браузерів, таких як Apple Safari, Google Chrome, Mozilla Firefox і Opera, а також фахівці AMD і Nvidia.
Ця технологія дозволяє упроваджувати апаратно-прискорену 3D графіку у веб-сторінки без необхідності використовувати спеціальні плагіни веб-браузера на будь-якій платформі, що підтримує OpenGL або OpenGL ES. Технічно це буде прив'язкою JavaScript-скриптів до функцій, визначених в бібліотеках OpenGL ES 2.0, реалізовану на рівні браузера.

2.2.4 Three.js.
Three.js — це легка кросбраузерна бібліотека JavaScript, яка використовується для створення та відображення анімованої комп’ютерної 3D графіки при розробці веб-застосунків.
Three.js дозволяє створювати прискорену на GPU 3D графіку, використовуючи язик JavaScript як частину сайта без підключення пропрієтарних плагінів для браузера. Це можливо завдяки використанню технології WebGL.

Особливості:

Рендери: Canvas, SVG або WebGL
Сцена: додавання та видалення об’єктів у режимі реального часу; туман
Камери: перспективна або ортографічна
Анімація: каркаси, швидка кінематика, зворотня кінематика, покадрова анімація
Джерела світу: зовнішні, направлені, точечні; тіні: одкинуті та отримані
Шейдери: повний доступ до всіх OpenGL шейдерів (GLSL)
Об’єкти: мережі, частки, "спрайти", лінії, скелетна анимація та інше
Геометрія: поверхня, куб, сфера, тор, 3D текст та інше; модифікатори: тканина, видавлювання
Завантажувачі даних: двоічний, зображення, JSON та сцена
Експорт та імпорт: утиліти, створюющі Three.js-сумісні JSON файли з форматів: Blender, openCTM, FBX, 3D Studio Max, Wavefront (.obj) та COLLADA (.dae)
Підтримка: документація з API бібліотеки знаходиться в стані постійного розширення й доповнення, існує публічний форум і велика спільнота
Приклатди: на офіційному сайті можливо знайти більше 150 прикладів роботы з шрифтами, моделями, текстурами, звуком та іншими елементами сцени
Бібліотека Three.js працює у всіх браузерах, підтримуючиї технологію WebGL; також може працювати з «чистим» інтерфейсом елемента CANVAS,
завдяки чому працює і на багатьох мобільних пристроях.

2.3 Огляз засобів розробки тривимірних моделей.
Autodesk 3ds Max — повнофункціональна пропієтарна професійна програмна система для створення і редагування тривимірної графіки і анімації, розроблена компанією Autodesk. Містить найсучасніші засоби для художників і фахівців в області мультимедіа.

Autodesk Maya — рішення для 3D моделювання, анімації і рендеринга, що використовується при створенні фільмів, телепрограм, ігор і дизайн-проектів. Maya має відкриту архітектуру, тому всю роботу можна записати в скрипт або запрограмувати, використовуючи API-інтерфейс або одину з двох вбудованих мов програмування — Maya Embedded Language (MEL) або Python.

Blender — безкоштовний пакет для створення тривимірної (3D) комп’ютерної графіки, що містить засоби моделювання, анімації, рендерингу, після-обробки відео, а також створення ігор. Функцій Blender цілком достатньо для роботи як звичайним користувачам, так і професіоналам. У програмі є всі основні інструменти, що використовуються в професійних 3D-редакторах.
У порівняно невеликий обсяг Blender вміщено повноцінний редактор з усіма основними функціями та набором текстур, моделей та обробників подій. Додаткові можливості в Blender реалізуються за рахунок підключення плагінів — як офіційних, створених авторами редактора, так і розроблених користувачами.
Основні можливості Blender:
— Підтримка різноманітних геометричних примітивів (включаючи полігональні моделі, систему швидкого моделювання в режимі SubSurf, криві Без’є, поверхні NURBS, метасфери, скульптурне моделювання та векторні шрифти).
— Універсальні вбудовані механізми рендерингу та інтеграція з YafRay.
— Інструменти анімації, серед яких інверсна кінематика, скелетна анімація та сіткова деформація, анімація по ключовим кадрам, нелінійна анімація, timeline коефіцієнтів вершин, обмежувачі, динаміка м’яких тіл, динаміка твердих тіл, система волосся на основі частинок та система частинок при визначенні колізій.
— Python використовується як засіб створення інструментів і прототипів, системи логіки в іграх, як засіб імпорту та експорту файлів, автоматизації завдань.
— Базові функції нелінійного редагування відео.
— Game Blender — підпроект Blender, що надає інтерактивні функції, такі як визначення колізій, рушій динаміки та
програмована логіка.
Характерною особливістю пакету Blender є його невеликий розмір та підтримка багатьох популярних операційних систем.

2.4 Формати даних для зберігання тривимірних моделей.
COLLADA (.dae) — xml формат, разроблений для обміну між 3D додатками, підтримується Three.js.
Підтримує морфічну анімацію, не підтримує скелетну.
OBJ (чи .OBJ) — формат файлу опису геометрії, вперше створений в Wavefront Technologies для їх анімаційного пакету Advanced Visualizer. Це відкритий файловий формат, і він був прийнятий іншими розробниками 3d редакторів, як стандартний.
OBJ Формат  дуже простий, і задає тільки геометрію об'єкта, а якщо конкретно, то координати кожної вершини, її текстурні координати, нормалі, і грані, що задаються списками вершин многокутників. Вершини многокутників за замовчуванням задаються проти годинникової стрілки, роблячи явне задання нормалей необов'язковим.
Не підтримує зберігання анімації.
JSON Three.js (Blender Exporter) — json формат, розроблений спеціально для Three.js, підтримує морфічну та скелетну анімацію.

Розділ 3. Опис програмної реалізації.
Для спрощеня розробки використовуємо бібліотеку Three.js.
Швидкість та прискорення вимірюються у метрах на секунду. Довжини у метрах. Кути у градусах. Обертання у кватерніонах.
Кватерніон це комплексне число, що являє обертання, складається з чотирьох чисел: три числа - повороти відносно вісей декартової системи координат для визначення вісі обертання та четверте число - кут повороту навколо цієї вісі у радіанах.

3.1 Розробка спрощеної математичної моделі автівки.
3.1.1 Двигун.
В двигуні моделюємо кількість оборотів за хвилину (RPM) та момент сили (Torque).
Момент сили залежить від RPM та відрізняється у різних двигунах.
Ми будемо використовувати заміри 5.7 літрового двигуна V8 які встановлювалися на Chevrolet Corvette (1997-2000)
(Мал. 1)
На кожному розрахунку фізики наш двигун плавно змінює RPM в залежності від ступеню відкритості дросельної заслінки, потім змінює момент сили використовуючи новий показник RPM.
Плавність зміни показників забеспечується фіксуванням максимального прискорення (позитивного та негативного), значення прискорення отримується множенням фіксованого прискорення на проміжок часу поміж прорахунками фізики.

Acceleration_engine <- Acceleration_fix_engine*Delta
RPM_engine <- +-Acceleration_engine*Throttle
Torque_engine <- getTorque(RPM_engine)
Де:
getTorque повертає момент сили в залежності від переданого в неї параметра RPM
Acceleration_engine - прискорення оборотів двигуна
Acceleration_fix_engine - фіксоване максимально можливе прискорення оборотів двигуна
Delta - проміжок часу поміж прорахунками фізики (діфференціал)
RPM_engine - обороти двигуна у оборотах за хвилину
Throttle - ступінь відкриття дросельної заслінки
Torque_engine - момент сили в двигуні

3.1.2 Трансмісія.
Трансмісія передає силу на шасі збільшуючи чи зменшуючи RPM за рахунок змін Torque через перемикання швидкостей.

В якості коефіцієнтів іізьмемо дійсні показники для Corvette C5 hardtop.
(Мал. 2)
Конвертувавши показники RPM на виході з модулю трансмісії отримуємо такі значення залежності RPM та Torque за швидкостями:
(Мал. 3)

Torque_transmission=Torque_engine*Efficiency*Top_gear*CurrentGear
RPM_transmission=RPM_engine*Torque_transmission/Torque_engine

Де:
Torque_transmission - момент сили на виході з модулю трансмісії
RPM_transmission - обороти за хвилину на виході з модулю трансмісії
Efficiency - внутрішній опір двигуна та трансмісії

3.1.3 Колеса.
У модулі колес будемо моделювати швидкість авто, прискорення авто, інерцію авто, гальма та бічний опір колес.
Інертність досягається гіперболічною плавністю зміни RPM_chassis:
RPM_chassis_acceleration=(RPM_transmission-RPM_chassis)*Throttle
RPM_chassis+=RPM_chassis_acceleration*Delta
Швидкість у метрах/секунду:
S=RPM_chassis/60*2Pi*WheelRatio
Гальма:
RPM_chassis+=RPM_Braking*Delta*Brakes;
Бічний опір:
RPM_chassis-=RPM_chassis*BodyAngle*Delta
Де:
RPM_chassis_acceleration - прискорення обертання колес
RPM_chassis - обертання колес у оборотах за хвилину
Speed - швидкість авто
WheelRatio - радіус колеса
RPM_Braking - фіксована максимальна швидкість гальмування
Breaks - ступінь натискання на гальма від 0 до 1
BodyAngle - кут між поточним поворотом колес на вектором напряму руху автівки.

3.1.4 Кермування.
Головна задача модулю кермування це поворот авто та гіперболічне пом’якшення поворотів, бо в дійсності людина не може так швидко крутити кермо, як натискати кнопку че рухати мишкою.

TurnAngle=(CurrentAngle-SteeringAngle)*.10
Де:
TurnAngle - результуючий поворот авто у градусах
CurrentAngle - поточний поворот авто
SteeringAngle - поточний поворот керма

3.1.5 Підвіска.
В нашій моделі підвіска відповідає за гіперболічні нахили кузова автівки вперед та вбоки в залежності від прискорення та повороту.

Angle=RPM_chassis_acceleration/2.5
LongAngle+=(Angle-CurrentLongAngle)*3*Delta
CarBodyQuaternion={1,0,0,(rad)LongAngle}

WidthAngle=SteeringAngle*Speed*.1
CarBodyQuaternion*={0,0,1,(rad)WidthAngle}

Де:
Angle - кут до якого прагнутиме кут кузову уздовж автівки
LongAngle - кут кузову уздовж автівки
WidthAngle - кут кузову по боках автівки
CarBodyQuaternion - комплексе число що задає обертання кузову

3.1.6 Інерція/занесення всієї автівки.
Занесення:
IntertionYAngle+=(CurrentYAngle-IntertionYAngle)

Інерція (вектор):
Inertion={sin(InertionYAngle), 0, cos(InertionYAngle)}

Де:
IntertionYAngle - кут занесення, поворот навколо вертикльної вісі
CurrentYAngle - поточний поворот кузова навколо вертикльної вісі
Inertion - вектор інерції

3.2 Розробка ігрового інтерфейсу.
Найголовніші якості ігрового інтерфейсу це візуальна простота, швидкість навчання та гнучкість.
3.2.1 Розташування моделі та камери.
Ігровий процес від третьої особи. Відстань від камери до моделі зафіксована.
Камера обертається навколо авто за двома вісьми: вертикально та горизонтально.

3.2.2 Зв’язок між розташуванням камери та показниками моделі.
3.2.2.1 Швидкість.
Зі зростанням швидкості зростає FOV (Field of View), що візуально спотворює перспективу і
візуально віддаляє авто, що каталізує відчуття збільшення швикості.

3.2.2.2 Поворот керма та швидкість.
При повороті керма камера рухається по горізонталі в залежності від ступіню і напряму повороту, також
кут повороту камери залежить від поточної швидкості авто, що більше швикість тим більше кут.

3.3 Управління.
Інтерфейсу потрібно отримувати інформацію про: кермування, акселерацію, гальмування та перемикання швидкостей.
Всі ці дані можуть бути отримані за допомогою миші.
Кермування - горизонтальна позиція миші, що лівіше тим більше віртуальне кермо повертається ліворуч, аналогічно правноруч.
Акселерація та гальмування таким самим чином, але відстежується вертикальная позиція курсора: вище - більше акселерація, нижче - потужніше гальмування.
Перемикання швидостей за допомогою колесика.

Література.
http://www.gamedev.ru/code/articles/?id=4193
http://www.asawicki.info/Mirror/Car%20Physics%20for%20Games/Car%20Physics%20for%20Games.html
http://www.racer.nl/
http://www.gartner.com/newsroom/id/2665715
http://uk.wikipedia.org/wiki/DirectX
http://uk.wikipedia.org/wiki/OpenGL
http://uk.wikipedia.org/wiki/WebGL
http://uk.wikipedia.org/wiki/Canvas
http://wiki.blender.org/index.php/UK/Main_Page
OpenGL ES 2.0 Programming Guide, Addison Wesley, August 2008
http://threejs.org/docs/
http://www.idavette.net/facts/c5specs/
